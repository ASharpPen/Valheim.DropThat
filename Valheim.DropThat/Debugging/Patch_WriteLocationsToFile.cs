using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using DropThat.Configuration;
using HarmonyLib;
using ThatCore.Extensions;
using ThatCore.Logging;
using ThatCore.Utilities.Valheim;

namespace DropThat.Debugging;

[HarmonyPatch(typeof(ZoneSystem))]
internal static class Patch_WriteLocationsToFile
{
    private const string FileName = "drop_that.locations.txt";

    [HarmonyPatch(nameof(ZoneSystem.Start))]
    [HarmonyPostfix]
    private static void WriteToFile(ZoneSystem __instance)
    {
        if (GeneralConfigManager.Config?.WriteLocationsToFile == true &&
            __instance.IsNotNull() &&
            __instance.m_locations is not null)
        {
            WriteLocationsToFile(__instance.m_locations);
        }
    }

    private static void WriteLocationsToFile(List<ZoneSystem.ZoneLocation> zoneLocations)
    {
        try
        {
            HashSet<string> printedLocations = new();
            StringBuilder stringBuilder = new();

            // Add header
            stringBuilder.AppendLine($"# This file was auto-generated by Drop That {DropThatPlugin.Version} at {DateTimeOffset.UtcNow.ToString("u")}, with Valheim '{Version.CurrentVersion.m_major}.{Version.CurrentVersion.m_minor}.{Version.CurrentVersion.m_patch}'.");
            stringBuilder.AppendLine($"# This file lists all prefab names of locations loaded, by the biome in which they can appear.");
            stringBuilder.AppendLine();

            Dictionary<Heightmap.Biome, List<string>> locationsByBiome = new();

            foreach (var location in zoneLocations)
            {
                var biomes = location.m_biome.Split();

                foreach (var biome in biomes)
                {
                    List<string> biomeLocations;

                    if (!locationsByBiome.TryGetValue(biome, out biomeLocations))
                    {
                        locationsByBiome[biome] = biomeLocations = new();
                    }

                    biomeLocations.Add(location.m_prefabName);
                }
            }

            foreach (var biome in locationsByBiome.OrderBy(x => x.Key))
            {
                var currentBiome = biome.Key.ToString();

                stringBuilder.AppendLine();
                stringBuilder.AppendLine($"[{currentBiome}]");

                foreach (var location in biome.Value)
                {
                    var locationKey = location + "." + currentBiome;

                    if (!printedLocations.Contains(locationKey))
                    {
                        stringBuilder.AppendLine(location);
                        printedLocations.Add(locationKey);
                    }
                }
            }

            DebugFileWriter.WriteFile(stringBuilder.ToString(), FileName, "datamined locations by biome");
        }
        catch (Exception e)
        {
            Log.Warning?.Log("Error while attempting to datamine locations and write them to file. Skipping.", e);
        }
    }
}