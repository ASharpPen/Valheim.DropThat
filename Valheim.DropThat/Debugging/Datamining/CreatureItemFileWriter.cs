using HarmonyLib;
using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using DropThat.Utilities;
using ThatCore.Logging;

namespace DropThat.Debugging.Datamining;

internal static class CreatureItemFileWriter
{
    private const string FileName = "drop_that.character_drop.items.txt";

    public static void WriteToFile(List<Tuple<GameObject, CharacterDrop>> characters)
    {
        try
        {
            List<string> lines = new List<string>(characters.Count * 20)
        {
            // Add header
            $"# This file was auto-generated by Drop That {DropThatPlugin.Version} at {DateTimeOffset.UtcNow.ToString("u")}, with Valheim '{Version.CurrentVersion.m_major}.{Version.CurrentVersion.m_minor}.{Version.CurrentVersion.m_patch}'.",
            $"# The entries listed here were extracted at runtime. It shows the items of entities which are modifiable by CharacterDrop tables.",
            $"# The file is intended for investigation, and primarily for identifying possible options for the CharacterDrop condition 'ConditionHasItem'.",
            $"# ",
            $"# This file is not scanned by Drop That, and any changes done will therefore have no effect. ",
            $""
        };

            foreach (var characterDrop in characters)
            {
                if (characterDrop.Item2.IsNull() ||
                   (characterDrop.Item2.m_drops?.Count ?? 0) == 0)
                {
                    continue;
                }

                var chr = characterDrop.Item1.GetComponent<Humanoid>();

                HashSet<string> inventoryItems = new HashSet<string>();

                if (chr is not null)
                {
                    if (chr.m_defaultItems is not null)
                    {
                        foreach (var item in chr.m_defaultItems.Where(x => x is not null))
                        {
                            inventoryItems.Add(item.name);
                        }
                    }
                    if (chr.m_randomArmor is not null)
                    {
                        foreach (var item in chr.m_randomArmor.Where(x => x is not null))
                        {
                            inventoryItems.Add(item.name);
                        }
                    }
                    if (chr.m_randomShield is not null)
                    {
                        foreach (var item in chr.m_randomShield.Where(x => x is not null))
                        {
                            inventoryItems.Add(item.name);
                        }
                    }
                    if (chr.m_randomWeapon is not null)
                    {
                        foreach (var item in chr.m_randomWeapon.Where(x => x is not null))
                        {
                            inventoryItems.Add(item.name);
                        }
                    }
                    if (chr.m_randomSets is not null)
                    {
                        foreach (var set in chr.m_randomSets.Where(x => x is not null))
                        {
                            foreach (var item in set.m_items.Where(x => x is not null))
                            {
                                inventoryItems.Add(item.name);
                            }
                        }
                    }
                }

                lines.Add($"[{characterDrop.Item1.name}.0]");
                lines.Add($"ConditionHasItem={inventoryItems?.Join()}");
                lines.Add("");
            }

            DebugFileWriter.WriteFile(lines, FileName, "default creature items");
        }
        catch (Exception e)
        {
            Log.Warning?.Log("Error while attempting to datamine creature items and write them to file. Skipping.", e);
        }
    }
}
