<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net472</TargetFramework>
    <AllowUnsafeBlocks>True</AllowUnsafeBlocks>
    <AssemblyVersion></AssemblyVersion>
    <FileVersion></FileVersion>
    <Version>2.4.0</Version>
    <ProduceReferenceAssembly>True</ProduceReferenceAssembly>
    <AssemblyName>Valheim.DropThat</AssemblyName>
    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
    <Authors>A Sharp Pen</Authors>
    <PackageProjectUrl></PackageProjectUrl>
    <RepositoryUrl>https://github.com/ASharpPen/Valheim.SpawnThat</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageTags>Valheim;Mod;Drop;Loot;BepInEx</PackageTags>
    <Description>Valheim mod and tool for configuring loot drops.</Description>
    <PackageLicenseExpression>Unlicense</PackageLicenseExpression>
    <Configurations>Debug;Release;Test</Configurations>
  </PropertyGroup>
  <ItemGroup>
    <Compile Remove="LibsStripped\**" />
    <Compile Remove="ThunderstoreResources\**" />
    <EmbeddedResource Remove="LibsStripped\**" />
    <EmbeddedResource Remove="ThunderstoreResources\**" />
    <None Remove="LibsStripped\**" />
    <None Remove="ThunderstoreResources\**" />
  </ItemGroup>
  
  <ItemGroup>
	  <PackageReference Include="HarmonyX" Version="2.10.1" />
	  <PackageReference Include="YamlDotNet" Version="13.7.1" />
	  <PackageReference Include="ILRepack.Lib.MSBuild.Task" Version="2.0.18.2" />
	  <PackageReference Include="Microsoft.Unity.Analyzers" Version="1.12.0">
		  <PrivateAssets>all</PrivateAssets>
		  <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
	  </PackageReference>
  </ItemGroup>
	
  <ItemGroup>
    <Reference Include="assembly_utils">
      <HintPath>..\Libs\Valheim\assembly_utils.dll</HintPath>
    </Reference>
    <Reference Include="assembly_valheim">
      <HintPath>..\Libs\Valheim\assembly_valheim.dll</HintPath>
    </Reference>
    <Reference Include="BepInEx">
      <HintPath>..\Libs\BepInEx\BepInEx.dll</HintPath>
    </Reference>
    <Reference Include="CreatureLevelControl">
      <HintPath>..\Libs\Smoothbrain-CreatureLevelAndLootControl\CreatureLevelControl.dll</HintPath>
    </Reference>
    <Reference Include="EpicLoot">
      <HintPath>..\Libs\RandyKnapp-EpicLoot\EpicLoot.dll</HintPath>
    </Reference>
    <Reference Include="ThatCore">
      <HintPath>..\Libs\ThatCore\ThatCore.dll</HintPath>
    </Reference>
    <Reference Include="ThatCore.Shared">
      <HintPath>..\Libs\ThatCore\ThatCore.Shared.dll</HintPath>
    </Reference>
    <Reference Include="ThatCore.Valheim">
      <HintPath>..\Libs\ThatCore\ThatCore.Valheim.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine">
      <HintPath>..\Libs\Unity\UnityEngine.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.CoreModule">
      <HintPath>..\Libs\Unity\UnityEngine.CoreModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.ImageConversionModule">
      <HintPath>..\Libs\Unity\UnityEngine.ImageConversionModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.PhysicsModule">
      <HintPath>..\Libs\Unity\UnityEngine.PhysicsModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.UI">
      <HintPath>..\Libs\Unity\UnityEngine.UI.dll</HintPath>
    </Reference>
  </ItemGroup>

	<ItemGroup>
		<InternalsVisibleTo Include="Valheim.DropThat.Tests" />
  </ItemGroup>

	<Target Name="PropagateVersionNumber" BeforeTargets="Build">

		<PropertyGroup>
			<RepoDir>$([System.IO.Path]::GetFullPath($([System.IO.Path]::Combine($(MSBuildProjectDirectory),'..'))))</RepoDir>
			<ThunderStoreDir>$([System.IO.Path]::Combine($(RepoDir),'Thunderstore'))</ThunderStoreDir>

			<Manifest>$([System.IO.Path]::Combine($(ThunderStoreDir),'manifest.json'))</Manifest>
			<PluginFile>$([System.IO.Path]::Combine($(MSBuildProjectDirectory),'DropThatPlugin.cs'))</PluginFile>
		</PropertyGroup>

		<Message Text="Replacing manifest version: $([System.Text.RegularExpressions.Regex]::Match($([System.IO.File]::ReadAllText($(Manifest))),'version_number&quot;.+')) with '$(Version)'" Importance="high" />

		<WriteLinesToFile File="$(Manifest)" Lines="$([System.Text.RegularExpressions.Regex]::Replace($([System.IO.File]::ReadAllText($(Manifest))),'version_number&quot;.+','version_number&quot;: &quot;$(Version)&quot;,'))" Overwrite="true" Encoding="UTF-8" />

		<Message Text="Replacing plugin version: $([System.Text.RegularExpressions.Regex]::Match($([System.IO.File]::ReadAllText($(PluginFile))),'Version\s?=\s?&quot;.+&quot;')) with '$(Version)'" Importance="high" />

		<WriteLinesToFile File="$(PluginFile)" Lines="$([System.Text.RegularExpressions.Regex]::Replace($([System.IO.File]::ReadAllText($(PluginFile))),'Version\s?=\s?&quot;.+&quot;','Version = &quot;$(Version)&quot;'))" Overwrite="true" Encoding="UTF-8" />

	</Target>

	<Target Name="PrepareReleaseArtifacts" AfterTargets="Build" Condition="'$(Configuration)'=='Release'">

		<PropertyGroup>
			<OutputNugetDir>$([System.IO.Path]::GetFullPath($([System.IO.Path]::Combine($(OutputDir),'..'))))</OutputNugetDir>
			<RepoDir>$([System.IO.Path]::GetFullPath($([System.IO.Path]::Combine($(MSBuildProjectDirectory),'..'))))</RepoDir>
			<ThunderStoreDir>$([System.IO.Path]::Combine($(RepoDir),'Thunderstore'))</ThunderStoreDir>
			<ReleaseDir>$([System.IO.Path]::Combine($(ThunderstoreDir),'DropThat_v$(Version)'))</ReleaseDir>
			<BuildConfigurationDir>$([System.IO.Path]::Combine($(BaseOutputPath),$(Configuration)))</BuildConfigurationDir>

			<DropThatDll>$(OutputPath)$(AssemblyName).dll</DropThatDll>
			<Readme>$([System.IO.Path]::Combine($(RepoDir),'README.md'))</Readme>
			<Icon>$([System.IO.Path]::Combine($(ThunderStoreDir),'icon.png'))</Icon>
			<Manifest>$([System.IO.Path]::Combine($(ThunderStoreDir),'manifest.json'))</Manifest>
		</PropertyGroup>

		<Message Text="Preparing release '$(ReleaseDir)'" Importance="high" />

		<RemoveDir Directories="$(ReleaseDir)" />
		<MakeDir Directories="$(ReleaseDir)" />

		<Copy SourceFiles="$(DropThatDll);$(Readme);$(Icon);$(Manifest)" DestinationFolder="$(ReleaseDir)" />

		<ZipDirectory SourceDirectory="$(ReleaseDir)" Overwrite="true" DestinationFile="$([System.IO.Path]::Combine($(ThunderStoreDir),'DropThat_v$(Version).zip'))" />

		<Move SourceFiles="$([System.IO.Path]::Combine($(ThunderStoreDir),'DropThat_v$(Version).zip'))" DestinationFiles="$([System.IO.Path]::Combine($(ReleaseDir),'DropThat_v$(Version).zip'))" />
	</Target>
</Project>